---
# pihole.yml
- name: Implantar Pi-hole no cluster K3s
  hosts: master
  become: true
  tasks:
    - name: Garantir que diretório de manifests existe
      file:
        path: /root/k3s-manifests
        state: directory
        mode: '0755'

    - name: Criar manifest do namespace para Pi-hole
      copy:
        dest: /root/k3s-manifests/01-pihole-namespace.yaml
        content: |
          apiVersion: v1
          kind: Namespace
          metadata:
            name: pihole
      register: namespace_manifest

    - name: Aplicar manifest do namespace
      shell: kubectl apply -f /root/k3s-manifests/01-pihole-namespace.yaml
      when: namespace_manifest.changed

    - name: Criar manifest do configmap para Pi-hole
      copy:
        dest: /root/k3s-manifests/02-pihole-configmap.yaml
        content: |
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: pihole-config
            namespace: pihole
          data:
            TZ: "America/Sao_Paulo"
            WEBPASSWORD: "123456"
            DNS1: "1.1.1.1"
            DNS2: "1.0.0.1"
      register: configmap_manifest

    - name: Aplicar manifest do configmap
      shell: kubectl apply -f /root/k3s-manifests/02-pihole-configmap.yaml
      when: configmap_manifest.changed

    - name: Criar manifest para storage class local
      copy:
        dest: /root/k3s-manifests/03-storage-class.yaml
        content: |
          apiVersion: storage.k8s.io/v1
          kind: StorageClass
          metadata:
            name: local-storage
          provisioner: kubernetes.io/no-provisioner
          volumeBindingMode: WaitForFirstConsumer
      register: storageclass_manifest

    - name: Aplicar manifest do storage class
      shell: kubectl apply -f /root/k3s-manifests/03-storage-class.yaml
      when: storageclass_manifest.changed

    - name: Criar diretório para dados do Pi-hole no nó master
      file:
        path: /data/pihole
        state: directory
        mode: '0755'

    - name: Criar manifest do PersistentVolume para Pi-hole
      copy:
        dest: /root/k3s-manifests/04-pihole-pv.yaml
        content: |
          apiVersion: v1
          kind: PersistentVolume
          metadata:
            name: pihole-data
          spec:
            capacity:
              storage: 1Gi
            accessModes:
              - ReadWriteOnce
            hostPath:
              path: /data/pihole
            storageClassName: local-storage
            nodeAffinity:
              required:
                nodeSelectorTerms:
                - matchExpressions:
                  - key: kubernetes.io/hostname
                    operator: In
                    values:
                    - k3s-master
      register: pv_manifest

    - name: Aplicar manifest do PersistentVolume
      shell: kubectl apply -f /root/k3s-manifests/04-pihole-pv.yaml
      when: pv_manifest.changed

    - name: Criar manifest do PersistentVolumeClaim para Pi-hole
      copy:
        dest: /root/k3s-manifests/05-pihole-pvc.yaml
        content: |
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            name: pihole-data
            namespace: pihole
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 1Gi
            storageClassName: local-storage
      register: pvc_manifest

    - name: Aplicar manifest do PersistentVolumeClaim
      shell: kubectl apply -f /root/k3s-manifests/05-pihole-pvc.yaml
      when: pvc_manifest.changed

    - name: Criar manifest do deployment do Pi-hole
      copy:
        dest: /root/k3s-manifests/06-pihole-deployment.yaml
        content: |
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: pihole
            namespace: pihole
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: pihole
            template:
              metadata:
                labels:
                  app: pihole
              spec:
                containers:
                  - name: pihole
                    image: pihole/pihole:latest
                    ports:
                      - containerPort: 80
                        name: http
                      - containerPort: 53
                        name: dns
                        protocol: TCP
                      - containerPort: 53
                        name: dns-udp
                        protocol: UDP
                      - containerPort: 67
                        name: dhcp
                        protocol: UDP
                    env:
                      - name: TZ
                        valueFrom:
                          configMapKeyRef:
                            name: pihole-config
                            key: TZ
                      - name: WEBPASSWORD
                        valueFrom:
                          configMapKeyRef:
                            name: pihole-config
                            key: WEBPASSWORD
                      - name: DNS1
                        valueFrom:
                          configMapKeyRef:
                            name: pihole-config
                            key: DNS1
                      - name: DNS2
                        valueFrom:
                          configMapKeyRef:
                            name: pihole-config
                            key: DNS2
                    volumeMounts:
                      - name: pihole-data
                        mountPath: /etc/pihole
                volumes:
                  - name: pihole-data
                    persistentVolumeClaim:
                      claimName: pihole-data
      register: deployment_manifest

    - name: Aplicar manifest do deployment do Pi-hole
      shell: kubectl apply -f /root/k3s-manifests/06-pihole-deployment.yaml
      when: deployment_manifest.changed

    - name: Criar manifest para MetalLB namespace
      copy:
        dest: /root/k3s-manifests/07-metallb-namespace.yaml
        content: |
          apiVersion: v1
          kind: Namespace
          metadata:
            name: metallb-system
      register: metallb_ns_manifest

    - name: Aplicar manifest do namespace MetalLB
      shell: kubectl apply -f /root/k3s-manifests/07-metallb-namespace.yaml
      when: metallb_ns_manifest.changed

    - name: Criar manifest para configuração do MetalLB
      copy:
        dest: /root/k3s-manifests/08-metallb-config.yaml
        content: |
          apiVersion: v1
          kind: ConfigMap
          metadata:
            namespace: metallb-system
            name: config
          data:
            config: |
              address-pools:
              - name: default
                protocol: layer2
                addresses:
                - {{ virtual_ip }}/24
      register: metallb_config_manifest

    - name: Aplicar manifest da configuração do MetalLB
      shell: kubectl apply -f /root/k3s-manifests/08-metallb-config.yaml
      when: metallb_config_manifest.changed

    - name: Criar manifest do serviço Pi-hole
      copy:
        dest: /root/k3s-manifests/09-pihole-service.yaml
        content: |
          apiVersion: v1
          kind: Service
          metadata:
            name: pihole
            namespace: pihole
            annotations:
              metallb.universe.tf/loadBalancerIPs: "{{ virtual_ip }}"
          spec:
            type: LoadBalancer
            ports:
              - name: http
                port: 80
                targetPort: 80
              - name: dns-tcp
                port: 53
                protocol: TCP
                targetPort: 53
              - name: dns-udp
                port: 53
                protocol: UDP
                targetPort: 53
              - name: dhcp
                port: 67
                protocol: UDP
                targetPort: 67
            selector:
              app: pihole
      register: service_manifest

    - name: Aplicar manifest do serviço Pi-hole
      shell: kubectl apply -f /root/k3s-manifests/09-pihole-service.yaml
      when: service_manifest.changed

    - name: Verificar se o MetalLB já está instalado
      shell: kubectl -n metallb-system get pods
      register: metallb_check
      failed_when: false
      changed_when: false

    - name: Instalar controlador do MetalLB
      shell: |
        kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.13.7/config/manifests/metallb-native.yaml
      when: metallb_check.rc != 0 or metallb_check.stdout == ""
